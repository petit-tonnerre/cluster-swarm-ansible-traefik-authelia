- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: /root/certificates
    state: directory
    owner: root
    group: root
    mode: '750'

- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: /etc/traefik/
    state: directory
    
- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: /etc/traefik/letsencrypt
    state: directory


- name: Create directory for Docker secrets (if it doesn't exist)
  file:
    path: /var/run/secrets
    state: directory
    mode: '750'
    owner: root
    group: root

- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: /etc/traefik
    state: directory
    owner: root
    group: root
    mode: '750'
  
- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: /etc/traefik/certs
    state: directory
    owner: root
    group: root
    mode: '750'

- name: Copier le fichier de certificat Traefik
  copy:
    src: traefik.yaml
    dest: /etc/traefik/

- name: Copier le fichier de certificat Traefik
  copy:
    src: traefik-cert.crt
    dest: /etc/traefik/certs/traefik-cert.crt

- name: Copier le fichier CSR Traefik
  copy:
    src: traefik.swarm.csr
    dest: /etc/traefik/certs/traefik.swarm.csr

- name: Copier la clé privée Traefik
  copy:
    src: traefik.swarm.key
    dest: /etc/traefik/certs/traefik.swarm.key


- name: create traefik network
  docker_network:
    name: traefik_net
    driver: overlay
  when: inventory_hostname in groups['managers']

- name: Create a volume
  docker_volume:
    name: traefik-public-certificates
    state : present

- name: Deploy traefik service
  vars:
    traefik_email: "your-email@example.com"
    traefik_domain: "swarm.cloudns.ch"
    traefik_username: "admin"
    traefik_hashed_password: "$2y$10$WDwuOLCGf8igWzOVav21wOsUtDylNaPfkeJuqXK2PrM6V//NdOjJy"
  docker_swarm_service:
    name: traefik
    placement:
      constraints: 
      - "node.role==manager" 
    publish:
      - { published_port: "80", target_port: "80" }
      - { published_port: "443", target_port: "443" }
    mounts:
      - source: /var/run/docker.sock
        target: /var/run/docker.sock
        type: bind
      - source: /etc/traefik/letsencrypt
        target: /letsencrypt
    read_only: true
    restart_config:
      condition: any
      delay: 30s
      max_attempts: 5
    networks:
      - "traefik_net"
    image: "traefik:latest"
    args:
      - "--providers.docker"
      - "--accesslog=true"
      - "--log.level=DEBUG"
      - "--api.dashboard=true"
      - "--providers.swarm.network=traefik_net"
      - "--providers.swarm.endpoint=unix:///var/run/docker.sock"
      - "--providers.swarm.exposedByDefault=false"
      - "--entryPoints.http.address=:80"
      - "--entryPoints.https.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=http"
      - "--certificatesresolvers.letsencrypt.acme.email=wboukerche@gmail.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
    labels:
      traefik.enable: "true"
      traefik.http.routers.api.rule: "Host(`admin.swarm.cloudns.ch`)"
      traefik.http.routers.api.entrypoints: "http"
      traefik.http.services.traefik.loadbalancer.server.port: "8080"

      traefik.http.routers.apis.entrypoints: "https"
      traefik.http.routers.apis.rule: "Host(`admin.swarm.cloudns.ch`)"
      traefik.http.routers.apis.tls.certresolver: "letsencrypt"

      traefik.http.routers.api.middlewares: "https_redirect"
      traefik.http.middlewares.https_redirect.redirectscheme.scheme: "https"

      traefik.http.routers.api.service: "api@internal"
      traefik.http.routers.apis.service: "api@internal"
      traefik.http.routers.apis.middlewares: "authelia@swarm"
    replicas: 3
  when: inventory_hostname in groups['managers'][0]


- name: install visualizer
  docker_swarm_service:
    name: visualizer
    image: dockersamples/visualizer
    publish:
      - { published_port: 8080, target_port: 8080 }
    networks:
      - "traefik_net"
    placement:
      constraints: "node.role==manager"
    mounts:
      - source: /var/run/docker.sock
        target: /var/run/docker.sock
        type: bind
    read_only: true
    restart_config:
      condition: any
      delay: 30s
      max_attempts: 5
    labels:
      traefik.enable: "true"
      traefik.swarmmode: "true"
      traefik.docker.network: "traefik_net"
      
      # HTTP Configuration
      traefik.http.routers.visualizer.rule: "Host(`visu.swarm.cloudns.ch`)"
      traefik.http.routers.visualizer.entrypoints: "http"
      traefik.http.services.visualizer.loadbalancer.server.port: "8080"
      
      # HTTPS Configuration
      traefik.http.routers.visualizers.rule: "Host(`visu.swarm.cloudns.ch`)"
      traefik.http.routers.visualizers.entrypoints: "https"
      traefik.http.routers.visualizers.tls.certresolver: "letsencrypt"
    
      traefik.http.routers.visualizer.middlewares: "https_redirect"
      traefik.http.middlewares.https_redirect.redirectscheme.scheme: "https"
      # Middleware
      traefik.http.routers.visualizers.middlewares: "authelia@swarm"
    replicas: 3
  when: inventory_hostname in groups['managers'][0]
